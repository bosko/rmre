#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require "yaml"
require "optparse"
require "erubis"
require "rmre"

options = {:db => {}}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: rmre -a ADAPTER -d DATABASE [options]"

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end

  opts.on('-f', '--file [FILE]',
          'Without file name creates settings and models loading RMRE files; otherwise loads settings from file') do |f|
    options[:file] = f.nil? ? true : f
  end

  opts.on('-a', '--adapter ADAPTER', 'ActiveRecord adapter to use') do |a|
    options[:db][:adapter] = a
  end

  opts.on('-d', '--database DATABASE', 'Database name') do |d|
    options[:db][:database] = d
  end

  options[:db][:username] = ''
  opts.on('-u', '--user [USER]', 'Databse connection username (default empty)') do |u|
    options[:db][:username] = u
  end

  options[:db][:password] = ''
  opts.on('-p', '--pass [PASS]', 'Database connection password (default empty)') do |p|
    options[:db][:password] = p
  end

  options[:db][:port] = nil
  opts.on('--port [PORT]', 'Port to use for database connection') do |p|
    options[:db][:port] = p
  end

  options[:db][:timeout] = 5000
  opts.on('-t', '--timeout [TIMEOUT]', 'Database connection timeout') do |t|
    options[:db][:timeout] = t
  end
  
  opts.on('-m', '--mode [MODE]', 'MS SQL conenction mode (ODBC only)') do |m|
    options[:db][:mode] = m
  end

  opts.on('-n', '--dsn [DSN]', 'ODBC DSN name (MS SQL only)') do |n|
    options[:db][:dsn] = n
  end

  options[:out_path] = File.expand_path(File.join(Dir.tmpdir, "rmre_models"))
  opts.on('-o', '--out [PATH]', 'Path where models will be generated (default <TMP>/rmre_models)') do |p|
    p.tr!(File::ALT_SEPARATOR, File::SEPARATOR) if File::ALT_SEPARATOR
    options[:out_path] = p
  end

  opts.on('-s', '--host [HOST]', 'IP address or name of the host') do |s|
    options[:db][:host] = s
  end

  opts.on('--ssl-ca [FILE]','SSL Certificate') do |ssl|
    options[:db][:sslca] = ssl
  end

  opts.on('-i', '--include pattern1,pattern2', Array, 'Include prefixes') do |i|
    options[:include] = i
  end

  opts.on('-v', '--version', "Prints gem version") do |v|
    puts "Rmre version #{Rmre::VERSION}"
    exit
  end

  opts.on('--dump-schema [FILE]', 'Create schema migration to FILE') do |ds_file|
    options[:dump_schema] = ds_file
  end

end

begin
  optparse.parse!
rescue OptionParser::ParseError => pe
  puts pe.message
  puts optparse
  exit
end

if options[:file] == true
  options[:db].merge!(:adapter=>'adapter_name',:database=>'db_name',:host=>'localhost') if options[:db][:adapter].nil?
  options.delete(:file)
  file_name = 'rmre_db'
  file_path = File.join(options[:out_path], "#{file_name}.yml")
  puts "Generating file #{file_path}..."
  FileUtils.mkdir_p options[:out_path] unless File.exist? options[:out_path]
  File.open(file_path, "w") do |file|
    file.print options.to_yaml
  end

  file_path = File.join(options[:out_path], "#{file_name}.rb")
  puts "Generating file #{file_path}..."
  File.open(file_path, "w") do |file|
    eruby = Erubis::Eruby.new(File.read(File.join(File.expand_path("../../lib/rmre", __FILE__), 'load_file.eruby')))
    file.write eruby.result(:out_path => options[:out_path],
                            :file_name => "#{file_name}")
  end
else
  options.merge! YAML.load_file(options[:file]) if options[:file] && File.exists?(options[:file])

  unless options[:db][:adapter]
    puts "Missing required arguments -a (--adapter) and -d (--database)"
    puts optparse
    exit
  end

  generator = Rmre::Generator.new(options[:db], options[:out_path], options[:include], options[:inflections])

  begin
    generator.connect
  rescue Exception => e
    puts e.message
    exit
  end

  if options[:dump_schema]
    puts "Dumping schema to #{options[:dump_schema]}..."
    File.open(options[:dump_schema], 'w') do |file|
      generator.dump_schema(file)
    end
  else
    puts "Generating models..."
    generator.create_models(generator.connection.tables)
  end
end
